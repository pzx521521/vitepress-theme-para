import{_ as s,c as e,a2 as t,o as n}from"./chunks/framework.DDqBDuc9.js";const k=JSON.parse('{"title":"小米4a 内网穿透","description":"","frontmatter":{"title":"小米4a 内网穿透","hidemeta":true},"headers":[],"relativePath":"posts/单片机/xiaomi_rathole.md","filePath":"posts/单片机/xiaomi_rathole.md"}'),i={name:"posts/单片机/xiaomi_rathole.md"};function p(r,a,o,l,h,c){return n(),e("div",null,a[0]||(a[0]=[t(`<h1 id="rathole-使用" tabindex="-1"><a href="https://github.com/rapiz1/rathole" target="_blank" rel="noreferrer">rathole</a> 使用 <a class="header-anchor" href="#rathole-使用" aria-label="Permalink to &quot;[rathole](https://github.com/rapiz1/rathole) 使用&quot;">​</a></h1><h2 id="路由器端" tabindex="-1">路由器端 <a class="header-anchor" href="#路由器端" aria-label="Permalink to &quot;路由器端&quot;">​</a></h2><p>因为小米4a是一个定制的openwrt, openwrt的libc 是 musl</p><h2 id="服务器端" tabindex="-1">服务器端 <a class="header-anchor" href="#服务器端" aria-label="Permalink to &quot;服务器端&quot;">​</a></h2><h3 id="centos" tabindex="-1">centos <a class="header-anchor" href="#centos" aria-label="Permalink to &quot;centos&quot;">​</a></h3><p>看一下cpu</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cat /proc/cpuinfo</span></span></code></pre></div><p>是intel的芯片</p><p>所以用linux x86</p><p>运行起来提示</p><p>/lib64/libc.so.6: version \`GLIBC_2.18&#39; not found (required by ./rathole)</p><p>但是懒得装了</p><h3 id="更换为docker" tabindex="-1">更换为docker <a class="header-anchor" href="#更换为docker" aria-label="Permalink to &quot;更换为docker&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run -d -p 2333:2333 -p 5202:5202 -v &quot;/root/rathole/config.toml:/app/config.toml&quot; rapiz1/rathole --server /app/config.toml</span></span></code></pre></div><h1 id="ngrok-使用" tabindex="-1"><a href="https://github.com/inconshreveable/ngrok" target="_blank" rel="noreferrer">ngrok</a> 使用 <a class="header-anchor" href="#ngrok-使用" aria-label="Permalink to &quot;[ngrok](https://github.com/inconshreveable/ngrok) 使用&quot;">​</a></h1><h2 id="服务器端-1" tabindex="-1">服务器端 <a class="header-anchor" href="#服务器端-1" aria-label="Permalink to &quot;服务器端&quot;">​</a></h2><h3 id="下载依赖" tabindex="-1">下载依赖 <a class="header-anchor" href="#下载依赖" aria-label="Permalink to &quot;下载依赖&quot;">​</a></h3><p>打开src 文件夹新进 go.mod</p><p>同步包</p><h3 id="添加tls" tabindex="-1">添加tls <a class="header-anchor" href="#添加tls" aria-label="Permalink to &quot;添加tls&quot;">​</a></h3><p>src\\ngrok\\server</p><p>新建文件夹及文件 src/ngrok/server/assets/tls.go</p><p>tls.go:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package assets</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import &quot;embed&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 使用1.16特性编译阶段将静态资源文件打包进编译好的程序</span></span>
<span class="line"><span>var (</span></span>
<span class="line"><span>	//go:embed tls</span></span>
<span class="line"><span>	Asset embed.FS</span></span>
<span class="line"><span>)</span></span></code></pre></div><p>复制 \\assets\\server\\tls 到 src/ngrok/server/assets/</p><p>修改server/tls 下对应的路径</p><p>加参运行</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-httpAddr :8080</span></span></code></pre></div><h1 id="frp" tabindex="-1">Frp <a class="header-anchor" href="#frp" aria-label="Permalink to &quot;Frp&quot;">​</a></h1><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/frp/frps.ini:/etc/frp/frps.ini</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> frps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snowdreamtech/frps</span></span></code></pre></div>`,30)]))}const u=s(i,[["render",p]]);export{k as __pageData,u as default};
