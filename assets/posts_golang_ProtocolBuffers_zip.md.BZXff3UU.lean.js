import{_ as e,c as a,a2 as i,o as t}from"./chunks/framework.D_NaTb9t.js";const g=JSON.parse('{"title":"Protocol Buffers压缩(编码)原理","description":"","frontmatter":{"title":"Protocol Buffers压缩(编码)原理","hidemeta":true},"headers":[],"relativePath":"posts/golang/ProtocolBuffers_zip.md","filePath":"posts/golang/ProtocolBuffers_zip.md"}'),n={name:"posts/golang/ProtocolBuffers_zip.md"};function p(l,s,o,d,r,h){return t(),a("div",null,s[0]||(s[0]=[i(`<h1 id="编码原网页在这里" tabindex="-1">编码<a href="https://developers.google.cn/protocol-buffers/docs/encoding" target="_blank" rel="noreferrer">原网页在这里</a> <a class="header-anchor" href="#编码原网页在这里" aria-label="Permalink to &quot;编码[原网页在这里](https://developers.google.cn/protocol-buffers/docs/encoding)&quot;">​</a></h1><h2 id="一个简单的消息" tabindex="-1">一个简单的消息 <a class="header-anchor" href="#一个简单的消息" aria-label="Permalink to &quot;一个简单的消息&quot;">​</a></h2><p>假设您有以下非常简单的消息定义：</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  optional</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在应用程序中，您创建一条<code>Test1</code>消息并将其设置<code>a</code>为 150。然后将消息序列化为输出流。如果您能够检查编码的消息，您会看到三个Byte：</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">08 96 01</span></span></code></pre></div><p>就3个Byte/ int本身还是4个Byte呢, 为什么是这3个Byte呢? 继续阅读...</p><h2 id="base-128-变种" tabindex="-1">Base 128 变种 <a class="header-anchor" href="#base-128-变种" aria-label="Permalink to &quot;Base 128 变种&quot;">​</a></h2><p>要了解您的简单协议缓冲区编码，您首先需要了解<em>varints</em>。Varints 是一种使用一个或多个字节序列化整数的方法。较小的数字占用较少的字节数。</p><p>varint 中的每个字节，除了最后一个字节，都设置了<strong>最高有效位</strong>(MSB)——这表明还有更多字节要到来。每个字节的低 7 位用于存储以 7 位为一组的数字的二进制补码表示，<strong>最低有效组在前</strong>。</p><p>例如，这里是数字 1——它是一个单字节，所以 MSB 没有设置：</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">0000 0001</span></span></code></pre></div><p>这里是 varint 处理后的300:——这有点复杂：</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1010 1100 0000 0010</span></span></code></pre></div><p>你怎么知道这是300？首先，您从每个字节中删除 MSB，因为这只是告诉我们是否已经到达数字的末尾（如您所见，它设置在第一个字节中，因为 varint 中有多个字节,</p><p>第一个byte(前8位)的 MSB是1, 所以要往后读</p><p>第二个byte(后8位)的 MSB是0, 所以代表改数字结束了</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1010 1100 0000 0010</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">→ 010 1100  000 0010</span></span></code></pre></div><p>您必须颠倒两组 7 位(去掉MSB的两个byte)，因为 varint 首先存储具有最低有效组的数字。然后将它们连接起来以获得最终值：</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">000 0010  010 1100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">→  000 0010 ++ 010 1100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">→  100101100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">→  256 + 32 + 8 + 4 = 300</span></span></code></pre></div><h2 id="消息结构" tabindex="-1">消息结构 <a class="header-anchor" href="#消息结构" aria-label="Permalink to &quot;消息结构&quot;">​</a></h2><p>协议缓冲区消息是一系列键值对。消息的二进制版本只是使用字段的编号作为键——每个字段的名称和声明的类型只能在解码端通过引用消息类型的定义（即<code>.proto</code>文件）来确定。</p><p>当消息被编码时，键和值被连接成一个字节流。当消息被解码时，解析器需要能够跳过它无法识别的字段。这样，可以将新字段添加到消息中，而不会破坏不了解它们的旧程序。为此，有线格式消息中每一对的“键”实际上是两个值——<code>.proto</code>文件中的字段编号，加上提供足够信息来查找以下值的长度的*有线类型。*在大多数语言实现中，这个键被称为标签。</p><p>可用的电线类型如下：</p><table tabindex="0"><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">意义</th><th style="text-align:left;">用于</th></tr></thead><tbody><tr><td style="text-align:left;">0</td><td style="text-align:left;">Varint</td><td style="text-align:left;">int32, int64, uint32, uint64, sint32, sint64, bool, enum</td></tr><tr><td style="text-align:left;">1</td><td style="text-align:left;">64-bit</td><td style="text-align:left;">fixed64, sfixed64, double</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">Length-delimited</td><td style="text-align:left;">string, bytes, embedded messages, packed repeated fields</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">Start group</td><td style="text-align:left;">groups（已弃用）</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">End group</td><td style="text-align:left;">groups（已弃用）</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">32 位</td><td style="text-align:left;">fixed32, sfixed32, float</td></tr></tbody></table><p>流式消息中的每个键都是带有值的 varint <code>(field_number &lt;&lt; 3) | wire_type</code>- 换句话说，数字的最后三位存储类型。</p><p>现在让我们再次看一下我们的简单示例。您现在知道流中的第一个数字始终是 varint 键，这里是 08，或者（删除 MSB）：</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">000 1000</span></span></code></pre></div><p>您取最后三位来获取类型 (0)，然后右移三位以获取字段编号 (000 1)。所以你现在知道字段号是 1，下面的值是一个 varint。使用上一节中的 varint 解码知识，您可以看到接下来的两个字节存储值 150。</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">96 01 = 1001 0110  0000 0001</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       → 000 0001  ++  001 0110 (drop the MSB and reverse the groups of 7 bits)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       → 10010110</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       → 128 + 16 + 4 + 2 = 150</span></span></code></pre></div><h2 id="更多值类型" tabindex="-1">更多值类型 <a class="header-anchor" href="#更多值类型" aria-label="Permalink to &quot;更多值类型&quot;">​</a></h2><h3 id="有符号整数" tabindex="-1">有符号整数 <a class="header-anchor" href="#有符号整数" aria-label="Permalink to &quot;有符号整数&quot;">​</a></h3><p>正如您在上一节中看到的，与线类型 0 关联的所有协议缓冲区类型都被编码为 varint。但是，在编码负数时，带符号的 int 类型（ <code>sint32</code>and <code>sint64</code>）和“标准” int 类型（<code>int32</code>and ）之间存在重要区别。<code>int64</code>如果使用<code>int32</code>or<code>int64</code>作为负数的类型，则生成的 varint<em>始终为 10 个字节长</em>——实际上，它被视为一个非常大的无符号整数。如果您使用其中一种有符号类型，则生成的 varint 将使用 ZigZag 编码，这种编码效率更高。</p><p>ZigZag 编码将有符号整数映射到无符号整数，因此具有较小<em>绝对值</em>（例如，-1）的数字也具有较小的 varint 编码值。它通过正整数和负整数来回“曲折”来执行此操作，因此 -1 被编码为 1，1 被编码为 2，-2 被编码为 3，依此类推，就像你可以在下表中看到：</p><table tabindex="0"><thead><tr><th style="text-align:left;">签名原件</th><th style="text-align:left;">编码为</th></tr></thead><tbody><tr><td style="text-align:left;">0</td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">-1</td><td style="text-align:left;">1</td></tr><tr><td style="text-align:left;">1</td><td style="text-align:left;">2</td></tr><tr><td style="text-align:left;">-2</td><td style="text-align:left;">3</td></tr><tr><td style="text-align:left;">2147483647</td><td style="text-align:left;">4294967294</td></tr><tr><td style="text-align:left;">-2147483648</td><td style="text-align:left;">4294967295</td></tr></tbody></table><p>换句话说，每个值<code>n</code>都使用编码</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(n &lt;&lt; 1) ^ (n &gt;&gt; 31)</span></span></code></pre></div><p>对于<code>sint32</code>s，或</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(n &lt;&lt; 1) ^ (n &gt;&gt; 63)</span></span></code></pre></div><p>对于 64 位版本。</p><p>请注意，第二个移位 -<code>(n &gt;&gt; 31)</code>部分 - 是算术移位。因此，换句话说，移位的结果要么是一个全为零的数字（如果<code>n</code>是正数），要么是全为一的数字（如果<code>n</code>是负数）。</p><p>当<code>sint32</code>or<code>sint64</code>被解析时，它的值被解码回原始的签名版本。</p><h3 id="非-varint-数值" tabindex="-1">非 varint 数值 <a class="header-anchor" href="#非-varint-数值" aria-label="Permalink to &quot;非 varint 数值&quot;">​</a></h3><p>非 varint 数值类型很简单——<code>double</code>并且<code>fixed64</code>具有连线类型 1，它告诉解析器期待一个固定的 64 位数据块；类似地<code>float</code>并且<code>fixed32</code>具有线类型 5，它告诉它期望 32 位。在这两种情况下，值都以 little-endian 字节顺序存储。</p><h3 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h3><p>线路类型 2（长度分隔）表示该值是一个 varint 编码长度，后跟指定的数据字节数。</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  optional</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>将 b 的值设置为“testing”可以为您提供：</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">12 07 [74 65 73 74 69 6e 67]</span></span></code></pre></div><p>[括号]中的字节是“testing”的UTF8(实际中没有&quot;]&quot;, 写上只是为了更容易理解)。这里的关键是 0x12。它被解析：</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">0x12</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">→ 0001 0010  (binary representation)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">→ 00010 010  (regroup bits)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">→ field_number = 2, wire_type = 2</span></span></code></pre></div><p>值中的长度 varint 为 7，其后的七个字节是字符串。</p><h2 id="嵌入式消息" tabindex="-1">嵌入式消息 <a class="header-anchor" href="#嵌入式消息" aria-label="Permalink to &quot;嵌入式消息&quot;">​</a></h2><p>这是一个包含我们示例类型 Test1 的嵌入式消息的消息定义：</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  optional</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这是编码版本，Test1 的<code>a</code>字段再次设置为 150：</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1a 03 08 96 01</span></span></code></pre></div><p>如您所见，最后三个字节与我们的第一个示例 ( ) 完全相同<code>08 96 01</code>，并且它们前面是数字 03(即长度)</p><p>嵌入消息的处理方式与字符串完全相同（wire type = 2）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>0x1a</span></span>
<span class="line"><span>→ 0001 1010  (binary representation)</span></span>
<span class="line"><span>→ 00011 010  (regroup bits)</span></span>
<span class="line"><span>→ field_number = 3, wire_type = 2</span></span></code></pre></div><h2 id="可选元素和重复元素" tabindex="-1">可选元素和重复元素 <a class="header-anchor" href="#可选元素和重复元素" aria-label="Permalink to &quot;可选元素和重复元素&quot;">​</a></h2><p>如果 proto2 消息定义包含<code>repeated</code>元素（没有<code>[packed=true]</code>选项），则编码消息具有零个或多个具有相同字段编号的键值对。这些重复值不必连续出现；它们可能与其他字段交错。解析时会保留元素相对于彼此的顺序，尽管相对于其他字段的顺序会丢失。在 proto3 中，重复字段使用<a href="https://developers.google.cn/protocol-buffers/docs/encoding#packed" target="_blank" rel="noreferrer">打包编码</a>，您可以在下面阅读。</p><p>对于 proto3 中的任何非重复字段或<code>optional</code>proto2 中的字段，编码的消息可能具有也可能没有具有该字段编号的键值对。</p><p>通常，编码消息永远不会有多个非重复字段的实例。但是，解析器应该处理它们所做的情况。对于数字类型和字符串，如果同一个字段出现多次，解析器接受它看到的*最后一个值。*对于嵌入的消息字段，解析器合并同一字段的多个实例，就像使用<code>Message::MergeFrom</code>方法一样——即后一个实例中的所有奇异标量字段替换前者，合并单个嵌入消息，并连接重复的字段。这些规则的效果是解析两个编码消息的连接会产生完全相同的结果，就像您分别解析两个消息并合并结果对象一样。也就是说，这个：</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyMessage message;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message.ParseFromString(str1 + str2);</span></span></code></pre></div><p>相当于：</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyMessage message, message2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message.ParseFromString(str1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message2.ParseFromString(str2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message.MergeFrom(message2);</span></span></code></pre></div><p>此属性有时很有用，因为它允许您合并两条消息，即使您不知道它们的类型。</p><h3 id="打包的重复字段" tabindex="-1">打包的重复字段 <a class="header-anchor" href="#打包的重复字段" aria-label="Permalink to &quot;打包的重复字段&quot;">​</a></h3><p>2.1.0 版引入了打包的重复字段，在 proto2 中被声明为重复字段，但带有特殊<code>[packed=true]</code>选项。在 proto3 中，默认情况下会打包标量数字类型的重复字段。这些功能类似于重复字段，但编码不同。包含零个元素的压缩重复字段不会出现在编码消息中。否则，该字段的所有元素都被打包成一个带有线类型 2（长度分隔）的键值对。每个元素的编码方式与正常情况相同，只是前面没有键。</p><p>例如，假设您有消息类型：</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  repeated</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">packed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>现在假设您构造 a <code>Test4</code>，为重复字段提供值 3、270 和 86942 <code>d</code>。然后，编码形式将是：</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">22        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// key (field number 4, wire type 2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">06        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// payload size (6 bytes)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">03        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// first element (varint 3)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">8E 02     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// second element (varint 270)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">9E A7 05  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// third element (varint 86942)</span></span></code></pre></div><p>只有原始数字类型（使用 varint、32 位或 64 位连线类型的类型）的重复字段才能被声明为“打包”。</p><p>请注意，尽管通常没有理由为打包的重复字段编码多个键值对，但解析器必须准备好接受多个键值对。在这种情况下，应连接有效载荷。每对必须包含整数个元素。</p><p>协议缓冲区解析器必须能够解析被编译的重复字段，就<code>packed</code>好像它们没有被打包一样，反之亦然。这允许<code>[packed=true]</code>以向前和向后兼容的方式添加到现有字段。</p><h2 id="现场顺序" tabindex="-1">现场顺序 <a class="header-anchor" href="#现场顺序" aria-label="Permalink to &quot;现场顺序&quot;">​</a></h2><p>字段编号可以在<code>.proto</code>文件中以任何顺序使用。选择的顺序对消息的序列化方式没有影响。</p><p><a href="https://developers.google.cn/protocol-buffers/docs/proto#updating" target="_blank" rel="noreferrer">当消息被序列化时，其已知或未知字段</a>的写入方式没有保证的顺序。序列化顺序是一个实现细节，任何特定实现的细节都可能在未来发生变化。因此，协议缓冲区解析器必须能够以任何顺序解析字段。</p><h3 id="影响" tabindex="-1">影响 <a class="header-anchor" href="#影响" aria-label="Permalink to &quot;影响&quot;">​</a></h3><ul><li><p>不要假设序列化消息的字节输出是稳定的。对于具有表示其他序列化协议缓冲区消息的传递字节字段的消息尤其如此。</p></li><li><p>默认情况下，在同一协议缓冲区消息实例上重复调用序列化方法可能不会产生相同的字节输出。也就是说，默认序列化不是确定性的。</p><ul><li>确定性序列化仅保证特定二进制文件的相同字节输出。字节输出可能会在不同版本的二进制文件中发生变化。</li></ul></li><li><p>对于协议缓冲区消息实例，以下检查可能会失败</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>foo</span></span></code></pre></div><p>：</p><ul><li><code>foo.SerializeAsString() == foo.SerializeAsString()</code></li><li><code>Hash(foo.SerializeAsString()) == Hash(foo.SerializeAsString())</code></li><li><code>CRC(foo.SerializeAsString()) == CRC(foo.SerializeAsString())</code></li><li><code>FingerPrint(foo.SerializeAsString()) == FingerPrint(foo.SerializeAsString())</code></li></ul></li><li><p>以下是一些逻辑上等效的协议缓冲区消息的示例场景，</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>foo</span></span></code></pre></div><p>并且</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>bar</span></span></code></pre></div><p>可能会序列化为不同的字节输出：</p><ul><li><code>bar</code>由将某些字段视为未知的旧服务器序列化。</li><li><code>bar</code>由以不同编程语言实现并以不同顺序序列化字段的服务器进行序列化。</li><li><code>bar</code>具有以非确定性方式序列化的字段。</li><li><code>bar</code>有一个字段存储协议缓冲区消息的序列化字节输出，该消息以不同的方式序列化。</li><li><code>bar</code>由一个新服务器序列化，该服务器由于实现更改而以不同的顺序序列化字段。</li><li><code>foo</code>并且<code>bar</code>是相同的单个消息以不同顺序的串联。</li></ul></li></ul><h2 id="精简参考卡" tabindex="-1">精简参考卡 <a class="header-anchor" href="#精简参考卡" aria-label="Permalink to &quot;精简参考卡&quot;">​</a></h2><p>以下以易于参考的格式提供了线路格式中最突出的部分。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>message   := (tag value)*     You can think of this as “key value”</span></span>
<span class="line"><span></span></span>
<span class="line"><span>tag       := (field &lt;&lt; 3) BIT_OR wire_type, encoded as varint</span></span>
<span class="line"><span>value     := (varint|zigzag) for wire_type==0 |</span></span>
<span class="line"><span>             fixed32bit      for wire_type==5 |</span></span>
<span class="line"><span>             fixed64bit      for wire_type==1 |</span></span>
<span class="line"><span>             delimited       for wire_type==2 |</span></span>
<span class="line"><span>             group_start     for wire_type==3 | This is like “open parenthesis”</span></span>
<span class="line"><span>             group_end       for wire_type==4   This is like “close parenthesis”</span></span>
<span class="line"><span></span></span>
<span class="line"><span>varint       := int32 | int64 | uint32 | uint64 | bool | enum, encoded as</span></span>
<span class="line"><span>                varints</span></span>
<span class="line"><span>zigzag       := sint32 | sint64, encoded as zig-zag varints</span></span>
<span class="line"><span>fixed32bit   := sfixed32 | fixed32 | float, encoded as 4-byte little-endian;</span></span>
<span class="line"><span>                memcpy of the equivalent C types (u?int32_t, float)</span></span>
<span class="line"><span>fixed64bit   := sfixed64 | fixed64 | double, encoded as 8-byte little-endian;</span></span>
<span class="line"><span>                memcpy of the equivalent C types (u?int64_t, double)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>delimited := size (message | string | bytes | packed), size encoded as varint</span></span>
<span class="line"><span>message   := valid protobuf sub-message</span></span>
<span class="line"><span>string    := valid UTF-8 string (often simply ASCII); max 2GB of bytes</span></span>
<span class="line"><span>bytes     := any sequence of 8-bit bytes; max 2GB</span></span>
<span class="line"><span>packed    := varint* | fixed32bit* | fixed64bit*,</span></span>
<span class="line"><span>             consecutive values of the type described in the protocol definition</span></span>
<span class="line"><span></span></span>
<span class="line"><span>varint encoding: sets MSB of byte to 1 to indicate that there are more bytes</span></span>
<span class="line"><span>zigzag encoding: sint32 and sint64 types use zigzag encoding.</span></span></code></pre></div><h3 id="钥匙" tabindex="-1">钥匙 <a class="header-anchor" href="#钥匙" aria-label="Permalink to &quot;钥匙&quot;">​</a></h3><ul><li><p><code>message := (tag value)*</code></p><p>消息被编码为零个或多个标签和值对的序列。</p></li><li><p><code>tag := (field &lt;&lt; 3) BIT_OR wire_type, encoded as varint</code></p><p>标记是<code>wire_type</code>存储在最低有效三位中的 a 和<code>.proto</code>文件中定义的字段编号的组合。</p></li><li><p><code>value := varint for wire_type==0, fixed32 for wire_type==5, ...</code></p><p><code>wire_type</code>根据标签中的指定，值的存储方式不同。</p></li><li><p><code>varint := int32 | int64 | uint32 | uint64 | sint32 | sint64 | bool | enum</code></p><p>您可以使用 varint 存储任何列出的数据类型。</p></li><li><p><code>fixed32 := int32 | uint32 | float</code></p><p>您可以使用 fixed32 来存储任何列出的数据类型。</p></li><li><p><code>fixed64 := int64 | uint64 | double</code></p><p>您可以使用 fixed64 存储任何列出的数据类型。</p></li><li><p><code>delimited := size (message | string | bytes | packed)</code></p><p>分隔值存储为大小，编码为 varint，然后是列出的数据类型之一。</p></li><li><p><code>message := valid protobuf sub-message</code></p><p>消息数据类型存储一条消息，然后可以将其存储在另一条消息中。</p></li><li><p><code>string := valid UTF-8 string, or sequence of 7-bit ASCII bytes; max 2GB</code></p><p>如前所述，字符串必须使用 UTF-8 字符编码。一个字符串不能超过 2GB。</p></li><li><p><code>bytes := any sequence of 8-bit bytes; max 2GB</code></p><p>如上所述，字节可以存储自定义数据类型，最大为 2GB。</p></li><li><p><code>packed := varint* | fixed32* | fixed64*</code></p><p><code>packed</code>当您存储协议定义中描述的类型的连续值时，请使用数据类型。标记在第一个之后的值被丢弃，这提高了协议缓冲区的效率。</p></li><li><p><code>varint encoding: sets MSB of byte to 1 to indicate that there are more bytes</code></p><p>有关如何序列化 varint 的更多信息，请参阅前面的部分<a href="https://developers.google.cn/protocol-buffers/docs/encoding#varints" target="_blank" rel="noreferrer">Base 128 Varints 。</a></p></li><li><p><code>zigzag encoding: sint32 and sint64 types use zigzag encoding</code></p><p><code>sint32</code>和类型使用 zigzag 编码，以便用小序列<code>sint64</code>表示小的负数。<code>varint</code>有关 zigzag 编码的更多信息，请参阅前面的有<a href="https://developers.google.cn/protocol-buffers/docs/encoding#signed-ints" target="_blank" rel="noreferrer">符号整数</a>部分。</p></li></ul><p>除非另有说明，本页内容均采用<a href="https://creativecommons.org/licenses/by/4.0/" target="_blank" rel="noreferrer">Creative Commons Attribution 4.0 License 许可</a>，代码示例采用<a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="noreferrer">Apache 2.0 License 许可</a>。有关详细信息，请参阅<a href="https://developers.google.cn/site-policies" target="_blank" rel="noreferrer">Google Developers 网站政策</a>。Java 是 Oracle 和/或其附属公司的注册商标。</p><p>最后更新时间为 2022-05-25 UTC。</p>`,89)]))}const k=e(n,[["render",p]]);export{g as __pageData,k as default};
