import{_ as i,c as e,a0 as n,o as s}from"./chunks/framework.DADtiyJ8.js";const u=JSON.parse('{"title":"ESP8266开发板的使用","description":"","frontmatter":{"title":"ESP8266开发板的使用","hidemeta":true},"headers":[],"relativePath":"posts/单片机/MCU/ESP8266_CP340.md","filePath":"posts/单片机/MCU/ESP8266_CP340.md"}'),p={name:"posts/单片机/MCU/ESP8266_CP340.md"};function l(t,a,r,o,d,h){return s(),e("div",null,a[0]||(a[0]=[n(`<h1 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h1><p><strong>纯新手程序员</strong>, 想体验一下物联网,打算做一个联网控制的开关.</p><p>搜了一下最便宜的就是ESP8226,教程也多.</p><p>有服务器,打算自己搭建MQTT(by RabiitMQ)来控制, 不好搞就http/tcp来控制</p><p>用游戏引擎Godot开发跨平台程序, 不好搞就android原生开发或者网页开发</p><p>下面是单片机相关的开发的学习过程</p><h2 id="价格" tabindex="-1">价格 <a class="header-anchor" href="#价格" aria-label="Permalink to &quot;价格&quot;">​</a></h2><p>ESP8266开发板的使用过程, 长这个样子,是ESP-12E加上<strong>CH340</strong>之后加电压转换等模块后的一个开发板, 在淘宝的大树聚买的,9.9板子的费用+3块钱的运费</p><p><img src="http://www.taichi-maker.com/wp-content/uploads/2017/12/NodeMCU2.jpg" alt="图片如下"></p><h2 id="参考教程" tabindex="-1">参考教程 <a class="header-anchor" href="#参考教程" aria-label="Permalink to &quot;参考教程&quot;">​</a></h2><p>参考的是<a href="http://www.taichi-maker.com/" target="_blank" rel="noreferrer">太极创客</a>的教程, 用的是<strong>Arduino</strong>(C++)开发的.</p><p>bilibili<a href="https://www.bilibili.com/video/BV1L7411c7jw?p=5" target="_blank" rel="noreferrer">视频链接</a></p><p>ps: 他开发板卖的是真的贵</p><h2 id="主流开发方式如" tabindex="-1">主流开发方式如: <a class="header-anchor" href="#主流开发方式如" aria-label="Permalink to &quot;主流开发方式如:&quot;">​</a></h2><p>我们要知道想在单片机上跑程序,要把代码编译为2进制程序(.bin/.hex)给单片机用,你可以用汇编编译.</p><p>也可以用其他的高级语言编译, 下面是一些编译方式, 具体用每一个编译器开发过程不再这里讲述,大概说一下他们之间的区别</p><ul><li><p>RTOS</p><p>RTOS是一个单片机系统,实现了多用户管理, 官方给了一套SDK(C/C++语言),可以调用SDK里面的接口实现控制单片机的目的,SDK中还用cmake给官方的编译器说了怎么编译,使用该套SDK编译出来的程序可以在RTOS中跑.</p><p>注意RTOS的SDK不支持AT</p></li><li><p>NonOS</p><p>NonOS是none os 没有系统的意思, 官方给了另外一套SDK(C/C++语言),可以调用SDK里面的接口实现控制单片机的目的,无需安装任何单片机系统.SDK中使用makefile指导编译器怎么编译.使用使用该套SDK编译出来的程序可以在RTOS中跑.</p><p>我买的默认刷的固件就是这个.可以直接使用AT.什么是AT:可以理解为用串口通信控制wifi的一些指令.用于其他芯片使用8226作为wifi模块,对wifi的控制</p></li><li><p>MircroPython</p><p>python针对单片机的编译器,支持了8226,据说支持了该芯片大部分操作</p></li><li><p>Arduino</p><p>是一个C/C++编译器,有一个老师嫌弃学生学一个单片机开发太麻烦了, 要先写代码, 然后读手册,烧录.</p><p>学几天都学不会.然后出了一套电路板,给学生学习,同时出了ArduinoIDE用于敲代码和烧录.</p><p>然后大家发现都很好用, 由于是开源的, 有人做了<a href="https://wokwi.com/" target="_blank" rel="noreferrer">wokwi-Arduino在线模拟</a></p><p>有人做了对各种开发板的支持.发展到现在云平台也做.</p><p>对8226做了支持,应该也支持了该芯片的所有功能</p></li><li><p>NodeMcu</p><p>是一个Lua编译器,8226是一家叫乐鑫的公司生产的,他们单独开发了一个Lua编译器</p></li><li><p>AliOS</p><p>同RTOS, 阿里出的</p></li><li><p>tinygo</p><p>同MircroPython, 是一个golang的编译器,仅支持芯片的部分功能,如wifi都不支持!</p></li></ul><h2 id="开发板每一个针脚的作用" tabindex="-1">开发板每一个针脚的作用 <a class="header-anchor" href="#开发板每一个针脚的作用" aria-label="Permalink to &quot;开发板每一个针脚的作用&quot;">​</a></h2><p>视频第2章讲了开发板的,及其对ESP-12E的封装看一下, 了解一下每一个针脚的意思和作用:</p><p><img src="http://www.taichi-maker.com/wp-content/uploads/2016/12/esp8266_devkit_horizontal-01.png" alt=""></p><ul><li><p>灰色中的数字代表对应ESP芯片上的端口的Number.</p><ul><li><p>敲代码的时候可以用过该ID来区分是引脚, 在Arduino也可以通过板子上的名称来控制.</p></li><li><p>如digitalWrite(D2, HIGH)和或digitalWrite(19, HIGH)效果是一样的, 实现就是定义一个变量const D2=19</p></li><li><p>有一个注意点,不能对板子的口子上接5V的电压,要3.3V的,否则板子会烧掉</p></li></ul></li><li><p>深蓝色是对应ESP芯片上端口的名称</p><ul><li>GPIO(general-purpose input/output),通用输入输出接口,可以读取/写入高电平和低电平(就是01)</li><li>Pwm 数值范围是0-1023</li></ul></li><li><p>浅蓝色指的是实现某可以具体功能的接口</p><ul><li>U0/1TXD | U0/1RXD. <ul><li>TXD(Transmit Data 发送数据) RXD: (Receive Data 接收数据), 有2对4个用于向开发板中刷数据,尽量不要用</li></ul></li><li>SPIxxx 用于SPI串口通信</li></ul></li><li><p>绿色的ADC是一个模拟引脚,</p><ul><li>其他的都是数字引脚,模拟引脚就是可以读取具体电压的数值,数字引脚就是只能读出来01.</li><li>读出电压值有什么用?比如一个温度器传感器,其实就是一个热敏电阻,温度改变,阻值也改变,通过电压变化就可以知道对应的温度.</li><li>注意只能输入0-1V的电压,高了会烧掉</li></ul></li><li><p>红色vin图上写了是电源, 可以不通过USB供电</p><ul><li>和PGIO一样不要输入3.3V以上的电压</li></ul></li></ul><h1 id="使用arduino开发esp8226" tabindex="-1">使用Arduino开发ESP8226 <a class="header-anchor" href="#使用arduino开发esp8226" aria-label="Permalink to &quot;使用Arduino开发ESP8226&quot;">​</a></h1><p>因为烧录程序需要一个USB转TTL的工具,有几个芯片可以实现这个功能, 根据芯片型号进行区分: CH340, CP210X</p><p>开发板把这个工具集成到开发板中了,但是从外表也看不出来他是什么芯片,就下了CP210X, 下完后看了一下居然是CH340的.他们是兼容的?暂时不做研究.</p><h2 id="下载并安装驱动" tabindex="-1">下载并安装驱动 <a class="header-anchor" href="#下载并安装驱动" aria-label="Permalink to &quot;下载并安装驱动&quot;">​</a></h2><h3 id="ch210x" tabindex="-1">CH210X <a class="header-anchor" href="#ch210x" aria-label="Permalink to &quot;CH210X&quot;">​</a></h3><p><a href="https://cn.silabs.com/developers/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="noreferrer">官方驱动网址</a></p><p>各种版本的都有windows下的版本很多, macos, linux 都很好理解</p><p>解释几个windows驱动的区别:</p><ul><li>CP210x Universal Windows Driver <ul><li>windows UWD, 就是win8及以上的系统用这个</li><li>根据自己的系统选择64/32位,是一个.sys文件,放在C:\\Windows\\System32\\drivers下即可</li><li>正常来说要regsvr32注册一下的,和注册dll一样</li><li>用按WIN+R组合键，在运行框中输入：regsvr32 .sys文件所在全路径，注意有空格</li></ul></li><li>CP210x Windows Drivers <ul><li>这个就是win7及以下的,根据自己的系统选择64/32位exe, 双击安装即可</li></ul></li></ul><h3 id="ch340" tabindex="-1">CH340 <a class="header-anchor" href="#ch340" aria-label="Permalink to &quot;CH340&quot;">​</a></h3><p><a href="https://www.wch.cn/search?t=all&amp;q=ch340" target="_blank" rel="noreferrer">官方驱动网址</a></p><p>在 驱动&amp;工具 中找 CH340/CH341的USB转串口, 有MacOS, Linux, windows, android.</p><h2 id="测试驱动有没有安装成功" tabindex="-1">测试驱动有没有安装成功 <a class="header-anchor" href="#测试驱动有没有安装成功" aria-label="Permalink to &quot;测试驱动有没有安装成功&quot;">​</a></h2><h3 id="注意数据线" tabindex="-1">注意数据线 <a class="header-anchor" href="#注意数据线" aria-label="Permalink to &quot;注意数据线&quot;">​</a></h3><p>插上开发板, 注意不要用仅2电源线的USB线.带数据传输的USB线插上开发板LED会闪一下,电源线不会</p><h4 id="windows" tabindex="-1">windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;windows&quot;">​</a></h4><p>windows下载设备管理器的</p><p>端口(COM和LPT)中可以看到多了一个设备, COM3就是串口号</p><h4 id="macos" tabindex="-1">MacOS <a class="header-anchor" href="#macos" aria-label="Permalink to &quot;MacOS&quot;">​</a></h4><p>控制台输入</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ls /dev/tty.wchusbser*</span></span></code></pre></div><p>提示</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/dev/tty.wchusbserial1420</span></span></code></pre></div><p>这个1420就是串口号</p><h2 id="为esp8266-nodemcu搭建arduino-ide开发环境" tabindex="-1"><a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/nodemcu-arduino-ide/" target="_blank" rel="noreferrer">为ESP8266-NodeMCU搭建Arduino IDE开发环境</a> <a class="header-anchor" href="#为esp8266-nodemcu搭建arduino-ide开发环境" aria-label="Permalink to &quot;[为ESP8266-NodeMCU搭建Arduino IDE开发环境](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/nodemcu-arduino-ide/)&quot;">​</a></h2><h3 id="下载arduino-ide" tabindex="-1">下载Arduino IDE <a class="header-anchor" href="#下载arduino-ide" aria-label="Permalink to &quot;下载Arduino IDE&quot;">​</a></h3><p><a href="https://www.arduino.cc/en/software" target="_blank" rel="noreferrer">地址在这</a></p><p>没有代码提示,编译超慢</p><h3 id="添加esp8226的源" tabindex="-1">添加ESP8226的源 <a class="header-anchor" href="#添加esp8226的源" aria-label="Permalink to &quot;添加ESP8226的源&quot;">​</a></h3><p>因为默认不支持ESP8226, 在<strong>Arduino IDE 首选项</strong>中的<strong>附加开发板管理网址</strong>输入, 并点击确定:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://arduino.esp8266.com/stable/package_esp8266com_index.json</span></span></code></pre></div><h3 id="添加开发板模版" tabindex="-1">添加开发板模版 <a class="header-anchor" href="#添加开发板模版" aria-label="Permalink to &quot;添加开发板模版&quot;">​</a></h3><p>Arduino IDE-&gt;工具-&gt;开发板-&gt;开发板管理器</p><p>搜索esp8266, 安装即可, 这个其实就相当于makefile,里面还有很多示例</p><p>windows下没有碰到问题</p><p>mac下github有可能不通导致安装失败, 翻墙/改DNS即可</p><h3 id="测试程序和自动烧录烧录" tabindex="-1">测试程序和自动烧录烧录 <a class="header-anchor" href="#测试程序和自动烧录烧录" aria-label="Permalink to &quot;测试程序和自动烧录烧录&quot;">​</a></h3><h4 id="选择测试程序" tabindex="-1">选择测试程序 <a class="header-anchor" href="#选择测试程序" aria-label="Permalink to &quot;选择测试程序&quot;">​</a></h4><p>Arduino IDE-&gt;文件-&gt;示例-&gt;01.Basic-&gt;Blink</p><p>看下代码很简单的代码, 开发板等1s一闪</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>void setup() {</span></span>
<span class="line"><span>  // initialize digital pin LED_BUILTIN as an output.</span></span>
<span class="line"><span>  pinMode(LED_BUILTIN, OUTPUT);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// the loop function runs over and over again forever</span></span>
<span class="line"><span>void loop() {</span></span>
<span class="line"><span>  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)</span></span>
<span class="line"><span>  delay(1000);                       // wait for a second</span></span>
<span class="line"><span>  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW</span></span>
<span class="line"><span>  delay(1000);                       // wait for a second</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="选择开发板和串口号以供自动烧录" tabindex="-1">选择开发板和串口号以供自动烧录 <a class="header-anchor" href="#选择开发板和串口号以供自动烧录" aria-label="Permalink to &quot;选择开发板和串口号以供自动烧录&quot;">​</a></h4><p>Arduino IDE-&gt;工具-&gt;端口 选择刚才看到的串口号</p><p>Arduino IDE-&gt;工具-&gt;开发板-&gt;esp8226-&gt;NodeMCU1.0(ESP-12E)</p><h4 id="编译并上传到开发板" tabindex="-1">编译并上传到开发板 <a class="header-anchor" href="#编译并上传到开发板" aria-label="Permalink to &quot;编译并上传到开发板&quot;">​</a></h4><p>Arduino IDE-&gt;点击编译(验证)/上传</p><p>点击编译(验证) 会编译程序</p><p>点击上传 如果没有编译会先编译再上传</p><h2 id="网络相关" tabindex="-1">网络相关 <a class="header-anchor" href="#网络相关" aria-label="Permalink to &quot;网络相关&quot;">​</a></h2><p>ESP8226可以AP(WirelessAccessPoint)模式,接入点模式, 建立一个网络, 当做服务器来使用. 就是所谓的组网/网关</p><p>也可以STA(Station))终端模式, 加入其他的网络</p><p>也可以同时存在</p><p><a href="https://github.com/esp8266/Arduino" target="_blank" rel="noreferrer">代码在这</a></p><p><a href="https://arduino-esp8266.readthedocs.io/en/latest/" target="_blank" rel="noreferrer">文档在这</a></p><h3 id="ap模式" tabindex="-1">AP模式 <a class="header-anchor" href="#ap模式" aria-label="Permalink to &quot;AP模式&quot;">​</a></h3><h4 id="最简单的示例" tabindex="-1">最简单的示例 <a class="header-anchor" href="#最简单的示例" aria-label="Permalink to &quot;最简单的示例&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const char *ssid = &quot;ESP8226&quot;; // 这里定义将要建立的WiFi名称。此处以&quot;taichi-maker&quot;为示例</span></span>
<span class="line"><span>                                   // 您可以将自己想要建立的WiFi名称填写入此处的双引号中</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>const char *password = &quot;12345678&quot;;  // 这里定义将要建立的WiFi密码。此处以12345678为示例</span></span>
<span class="line"><span>                                    // 您可以将自己想要使用的WiFi密码放入引号内</span></span>
<span class="line"><span>                                    // 如果建立的WiFi不要密码，则在双引号内不要填入任何信息</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>void setup() {</span></span>
<span class="line"><span>  Serial.begin(9600);              // 启动串口通讯</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>  WiFi.softAP(ssid, password);     // 此语句是重点。WiFi.softAP用于启动NodeMCU的AP模式。</span></span>
<span class="line"><span>                                   // 括号中有两个参数，ssid是WiFi名。password是WiFi密码。</span></span>
<span class="line"><span>                                   // 这两个参数具体内容在setup函数之前的位置进行定义。</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  Serial.print(&quot;Access Point: &quot;);    // 通过串口监视器输出信息</span></span>
<span class="line"><span>  Serial.println(ssid);              // 告知用户NodeMCU所建立的WiFi名</span></span>
<span class="line"><span>  Serial.print(&quot;IP address: &quot;);      // 以及NodeMCU的IP地址</span></span>
<span class="line"><span>  Serial.println(WiFi.softAPIP());   // 通过调用WiFi.softAPIP()可以得到NodeMCU的IP地址</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>void loop() { </span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="如何获取到print数据" tabindex="-1">如何获取到print数据 <a class="header-anchor" href="#如何获取到print数据" aria-label="Permalink to &quot;如何获取到print数据&quot;">​</a></h4><p>打开Arduino IDE-&gt;串口监视器</p><p>因为此时程序已经启动过了,打印过了. 所以没有任何东西,要手动在开发板上按一下reset, 重新启动.就会出现了</p><h2 id="闪存文件系统" tabindex="-1">闪存文件系统 <a class="header-anchor" href="#闪存文件系统" aria-label="Permalink to &quot;闪存文件系统&quot;">​</a></h2><h3 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h3><p>Arduino IDE-&gt;工具-&gt;Flash seize-&gt;3MB</p><p>在上传程序的时候会初始化文件闪存系统</p><h3 id="插件安装" tabindex="-1">插件安装 <a class="header-anchor" href="#插件安装" aria-label="Permalink to &quot;插件安装&quot;">​</a></h3><p>在当前项目目录下新建tool, 整个插件文件夹放在里面</p><h2 id="碰到的问题" tabindex="-1">碰到的问题 <a class="header-anchor" href="#碰到的问题" aria-label="Permalink to &quot;碰到的问题&quot;">​</a></h2><h3 id="编译器不会检查返回值有没有被初始化" tabindex="-1">编译器不会检查返回值有没有被初始化 <a class="header-anchor" href="#编译器不会检查返回值有没有被初始化" aria-label="Permalink to &quot;编译器不会检查返回值有没有被初始化&quot;">​</a></h3><p>如果定义了返回值,但是没有返回的话</p><p>编译的过去,但是报错,然后单片机重启, 找了很长时间</p><h3 id="上传文件和控制台不能同时开" tabindex="-1">上传文件和控制台不能同时开 <a class="header-anchor" href="#上传文件和控制台不能同时开" aria-label="Permalink to &quot;上传文件和控制台不能同时开&quot;">​</a></h3><p>因为他们都是用的串口通信</p><h3 id="板载led是低电平的时候亮" tabindex="-1">板载LED是低电平的时候亮 <a class="header-anchor" href="#板载led是低电平的时候亮" aria-label="Permalink to &quot;板载LED是低电平的时候亮&quot;">​</a></h3><p>为什么因为电路图这样设计的,这样设计的原因是:</p><p>详情了解灌电流和拉电流的概念</p><h3 id="编译提示重复定义" tabindex="-1">编译提示重复定义 <a class="header-anchor" href="#编译提示重复定义" aria-label="Permalink to &quot;编译提示重复定义&quot;">​</a></h3><p>编译的时候会搜索整个文件夹-&gt;如果有2个重复的文件,在同一个文件中找了半天找不到第二个重复名称的函数,太不智能了啊.</p><h3 id="吐槽arduino" tabindex="-1">吐槽Arduino <a class="header-anchor" href="#吐槽arduino" aria-label="Permalink to &quot;吐槽Arduino&quot;">​</a></h3><ul><li><p>没有代码提示,这是人干的事儿么. 非8226代码支持的贼棒</p></li><li><p>ctrl不能跳转.h文件,要看自己去找源码看, 太麻烦了</p></li><li><p>编译太慢了,一个几十k的程序,你他妈要编10s以上,离谱了</p></li><li><p>没有错误检查机制,要自己编译检查,编译又慢的一批,效率太低了</p></li><li><p>没有行号, 报错多少行,很难找</p></li><li><p>用记事本编辑后不会自动同步到IDE</p></li><li><p>字体不能修改, )} 等等很像,看了半天没看出来</p></li><li><p>乱报错, 明明是一个函数漏写了,报的是{什么的</p></li><li><p>定位错误,编译器报的行数和定位的行数不一样</p></li><li><p>报错信息不太对,明明是漏写了小括号,提示函数没有定义</p></li><li><p>编译过了还能运行报错,没有抓错机制, 一报错就单片机重启</p></li></ul>`,100)]))}const b=i(p,[["render",l]]);export{u as __pageData,b as default};
